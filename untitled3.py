# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oGVUfLVM65wCibALuDHViuHrHN9Pe8Nc
"""

import numpy as np

def get_matrix():
    """Function to take matrix input from the user"""
    rows = int(input("Enter number of rows: "))
    cols = int(input("Enter number of columns: "))
    print("Enter the elements row-wise (space-separated):")
    matrix = [list(map(float, input().split())) for _ in range(rows)]
    return np.array(matrix)

def matrix_operations():
    print("\n===== Matrix Operations Tool =====")
    print("1. Addition\n2. Subtraction\n3. Multiplication\n4. Transpose\n5. Determinant\n6. Exit")

    while True:
        choice = int(input("\nChoose an operation (1-6): "))

        if choice == 6:
            print("Exiting the program. Goodbye!")
            break

        if choice in [1, 2, 3]:  # Operations requiring two matrices
            print("\nEnter first matrix:")
            A = get_matrix()
            print("\nEnter second matrix:")
            B = get_matrix()

            if choice == 1:
                if A.shape == B.shape:
                    print("\nMatrix Addition Result:\n", A + B)
                else:
                    print("\nError: Matrices must have the same dimensions for addition.")

            elif choice == 2:
                if A.shape == B.shape:
                    print("\nMatrix Subtraction Result:\n", A - B)
                else:
                    print("\nError: Matrices must have the same dimensions for subtraction.")

            elif choice == 3:
                if A.shape[1] == B.shape[0]:
                    print("\nMatrix Multiplication Result:\n", np.dot(A, B))
                else:
                    print("\nError: Columns of first matrix must match rows of second matrix for multiplication.")

        elif choice == 4:  # Transpose
            print("\nEnter matrix:")
            A = get_matrix()
            print("\nTranspose of the Matrix:\n", A.T)

        elif choice == 5:  # Determinant
            print("\nEnter a square matrix:")
            A = get_matrix()
            if A.shape[0] == A.shape[1]:
                print("\nDeterminant of the Matrix:", round(np.linalg.det(A), 2))
            else:
                print("\nError: Determinant can only be calculated for square matrices.")

        else:
            print("\nInvalid choice! Please select a valid option.")

# Run the tool
matrix_operations()